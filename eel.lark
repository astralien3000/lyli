start : (instr ";")* instr?

instr : expr
      | stmt

expr : atomic_expr
     | call_expr

stmt : expr (expr)+

atomic_expr : string_expr
            | integer_expr
            | symbol_expr
            | operator

pp : "++"
mm : "--"

call_expr : paren_call_expr
          | brace_call_expr
          | array_call_expr

paren_call_expr : expr "(" (instr ",")* instr? ")"
brace_call_expr : expr "{" (instr ";")* instr? "}"
array_call_expr : expr "[" (instr ",")* instr? "]"

operator : pp | mm
         | dot | arrow
         | mul | bwand | not | bwnot
         | div | mod
         | add | sub
         | lt | gt | le | ge
         | eq | neq

dot : "."
arrow : "->"

mul : "*"
bwand : "&"
not : "!"
bwnot : "~"

div : "/"
mod : "%"

add : "+"
sub : "-"

lt : "<"
gt : ">"
le : "<="
ge : ">="

eq : "=="
neq : "!="

or_ : "||"

string_expr : STRING
integer_expr : CONSTANTI
symbol_expr : IDENTIFIER

STRING : /\"[^\"]*\"/
IDENTIFIER : /[a-zA-z][a-zA-Z0-9]*/
CONSTANTI : /\d+/
CONSTANTF : /\d+\.\d*/

WS : " "|"\n"|"\r"|"\t"
%ignore WS
