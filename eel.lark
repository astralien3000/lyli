start : (instr ";")* instr?

instr : expr
      | stmt

expr : atomic_expr
     | call_expr

stmt : expr (expr)+

atomic_expr : string_expr
            | integer_expr
            | symbol_expr
            | operator

call_expr : paren_call_expr
          | brace_call_expr
          | array_call_expr

paren_call_expr : expr "(" (instr ",")* instr? ")"
brace_call_expr : expr "{" (instr ";")* instr? "}"
array_call_expr : expr "[" (instr ",")* instr? "]"

operator : PP | MM
         | DOT | ARROW
         | MUL | BWAND | NOT | BWNOT
         | DIV | MOD
         | ADD | SUB
         | LT | GT | LE | GE
         | EQ | NEQ
         | OR_
         | ASSIGN

PP : "++"
MM : "--"

DOT : "."
ARROW : "->"

MUL : "*"
BWAND : "&"
NOT : "!"
BWNOT : "~"

DIV : "/"
MOD : "%"

ADD : "+"
SUB : "-"

LT : "<"
GT : ">"
LE : "<="
GE : ">="

EQ : "=="
NEQ : "!="

OR_ : "||"

ASSIGN : "="

string_expr : STRING
integer_expr : CONSTANTI
symbol_expr : IDENTIFIER

STRING : /\"[^\"\n]*\"/
IDENTIFIER : /[^\W\d]\w*/
CONSTANTI : /\d+\w*/
CONSTANTF : /\d+\.\d*\w*/

WS : /\s/
%ignore WS
