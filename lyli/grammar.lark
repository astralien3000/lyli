start : instr_list

instr : expr
      | stmt
      | bop_stmt
      | uop_expr
      | operator
      | "(" instr ")"

expr : atomic_expr
     | call_expr

stmt : expr (expr)+
     | expr (expr)* bop_expr

atomic_expr : string_expr
            | longstring_expr
            | char_expr
            | float_expr
            | integer_expr
            | symbol_expr

call_expr: expr "(" instr_list ")"
         | expr "{" instr_list "}"
         | expr "[" instr_list "]"

par_expr: expr | "(" instr ")"

bop_expr: expr (operator par_expr)+

bop_stmt: par_expr (operator par_expr)+
        | par_expr operator

uop_expr: operator expr

instr_list: (instr ",")* instr?
          | (instr ";")* instr?

operator: OPERATOR

string_expr : STRING

longstring_expr : LONGSTRING

char_expr : CHAR_LITERAL

integer_expr : INT_LITERAL
             | BIN_LITERAL
             | OCT_LITERAL
             | DEC_LITERAL
             | HEX_LITERAL
             | ZERO_LITERAL

float_expr : FLOAT_LITERAL

symbol_expr : IDENTIFIER

INT_LITERAL : /[1-9]([0-9]|_[0-9])*/
BIN_LITERAL : /0b[01]([01]|_[01])*/
OCT_LITERAL : /0o[0-7]([0-7]|_[0-7])*/
DEC_LITERAL : /0d[0-9]([0-9]|_[0-9])*/
HEX_LITERAL : /0x[0-9a-fA-F]([0-9a-fA-F]|_[0-9a-fA-F])*/
ZERO_LITERAL : /0/

FLOAT_LITERAL : FLOAT_INTEGER FLOAT_DECIMAL FLOAT_EXPONENT
              | FLOAT_INTEGER FLOAT_DECIMAL
              | FLOAT_INTEGER FLOAT_EXPONENT

FLOAT_INTEGER : /(0|[1-9]([0-9]|_[0-9])*)/
FLOAT_DECIMAL : /\.[0-9]([0-9]|_[0-9])*/
FLOAT_EXPONENT : /[eE][0-9]([0-9]|_[0-9])*/

STRING : /\"[^\"\n]*\"/
LONGSTRING : /\"\"\"([^\"]|\"\"?[^\"])+\"\"\"/
CHAR_LITERAL : /'[^'\n]'/

IDENTIFIER : /[^\W\d]\w*/

OPERATOR : /[.*\/+\-:&|=!?~#^@$%<>]+/

WS : /\s+/
%ignore WS
